// <auto-generated />
using System;
using IslamicFace.Infrastructure.context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IslamicFace.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250704163026_Add_Post_PostMedias_Relation")]
    partial class Add_Post_PostMedias_Relation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IslamicFace.Domain.Entities.Country", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TinyInt");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Identity", "1, 1");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.FriendRequest", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("BigInt");

                    b.Property<DateTime>("DateSend")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("ReceiverID")
                        .HasColumnType("BigInt");

                    b.Property<byte>("RequestStatus")
                        .HasColumnType("TinyInt");

                    b.Property<DateTime?>("ResponseAt")
                        .HasColumnType("DateTime");

                    b.Property<long>("senderID")
                        .HasColumnType("BigInt");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Identity", "1, 1");

                    b.HasIndex("senderID", "ReceiverID")
                        .IsUnique();

                    b.ToTable("FriendRequests", (string)null);
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.Post", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("BigInt");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("postText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("userId")
                        .HasColumnType("BigInt");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Identity", "1, 1");

                    b.HasIndex("userId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.PostComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BigInt");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<long?>("ParentCommentID")
                        .HasColumnType("BigInt");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("postId")
                        .HasColumnType("BigInt");

                    b.Property<int>("reactLikeCount")
                        .HasColumnType("int");

                    b.Property<long>("userId")
                        .HasColumnType("BigInt");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Identity", "1, 1");

                    b.HasIndex("postId");

                    b.HasIndex("userId");

                    b.ToTable("PostComments", (string)null);
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.PostMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BigInt");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("mediaType")
                        .HasColumnType("tinyInt");

                    b.Property<string>("mediaURL")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("postId")
                        .HasColumnType("BigInt");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Identity", "1, 1");

                    b.HasIndex("postId");

                    b.ToTable("PostMedias", (string)null);
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.PostReaction", b =>
                {
                    b.Property<long>("userId")
                        .HasColumnType("BigInt");

                    b.Property<long>("postId")
                        .HasColumnType("BigInt");

                    b.Property<byte>("reactTypeID")
                        .HasColumnType("tinyint");

                    b.HasKey("userId", "postId");

                    b.ToTable("PostReactions", (string)null);
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.PostTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BigInt");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("postId")
                        .HasColumnType("BigInt");

                    b.Property<string>("tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Identity", "1, 1");

                    b.ToTable("PostTags", (string)null);
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.Reaction", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("TinyInt");

                    b.Property<string>("ReactType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Identity", "1, 1");

                    b.ToTable("Reactions", (string)null);
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BigInt");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("bio")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<byte>("countryID")
                        .HasColumnType("TinyInt");

                    b.Property<DateOnly>("dateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("VARCHAR");

                    b.Property<bool>("gender")
                        .HasColumnType("Bit");

                    b.Property<DateTime>("joinDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("profilePictureURL")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("VARCHAR");

                    b.Property<byte>("settingId")
                        .HasColumnType("TinyInt");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("VARCHAR");

                    b.Property<byte>("userType")
                        .HasColumnType("TinyInt");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Identity", "1, 1");

                    b.HasIndex("countryID")
                        .IsUnique();

                    b.HasIndex("settingId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.UserSetting", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("TinyInt");

                    b.Property<string>("GenderOfFriends")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Identity", "1, 1");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.Post", b =>
                {
                    b.HasOne("IslamicFace.Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.PostComment", b =>
                {
                    b.HasOne("IslamicFace.Domain.Entities.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IslamicFace.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.PostMedia", b =>
                {
                    b.HasOne("IslamicFace.Domain.Entities.Post", "Post")
                        .WithMany("PostMedias")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.PostReaction", b =>
                {
                    b.HasOne("IslamicFace.Domain.Entities.User", "User")
                        .WithMany("PostReactions")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.User", b =>
                {
                    b.HasOne("IslamicFace.Domain.Entities.Country", "Country")
                        .WithOne("User")
                        .HasForeignKey("IslamicFace.Domain.Entities.User", "countryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IslamicFace.Domain.Entities.UserSetting", "UserSetting")
                        .WithOne("User")
                        .HasForeignKey("IslamicFace.Domain.Entities.User", "settingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("UserSetting");
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.Country", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostMedias");
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostReactions");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("IslamicFace.Domain.Entities.UserSetting", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
